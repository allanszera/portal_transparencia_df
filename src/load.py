import streamlit as st
import duckdb
import matplotlib.pyplot as plt
import pandas as pd

st.set_page_config(layout="wide")

parquet_path = 'C:/Users/allan/OneDrive/portal_transparencia_df/data/servidores_tratado.parquet'

# Consultas SQL
sql1 = f"""
SELECT √ìRG√ÉO, sum(L√çQUIDO) as SOMA_SALARIO
FROM read_parquet('{parquet_path}')
GROUP BY √ìRG√ÉO
ORDER BY SOMA_SALARIO DESC
LIMIT 10
"""
sql2 = f"""
SELECT CARGO, √ìRG√ÉO, SITUA√á√ÉO, max(L√çQUIDO) as MAIOR_LIQUIDO
FROM read_parquet('{parquet_path}')
GROUP BY CARGO, √ìRG√ÉO, SITUA√á√ÉO
ORDER BY MAIOR_LIQUIDO DESC
LIMIT 10
"""
sql3 = f"""
SELECT CARGO, √ìRG√ÉO, SITUA√á√ÉO, max(L√çQUIDO) as MAIOR_LIQUIDO
FROM read_parquet('{parquet_path}')
WHERE SITUA√á√ÉO = 'ATIVO'
GROUP BY CARGO, √ìRG√ÉO, SITUA√á√ÉO
ORDER BY MAIOR_LIQUIDO DESC
LIMIT 10
"""

# Op√ß√µes do "carrossel"
pages = [
    "Resumo do Projeto",
    "Top 10 √ìrg√£os com Maior Soma de Sal√°rios",
    "Top 10 Maiores Sal√°rios L√≠quidos por Cargo",
    "Top 10 Maiores Sal√°rios L√≠quidos entre Servidores Ativos",
    "Storytelling Final"
]

# Barra de navega√ß√£o estilo carrossel
page = st.selectbox("Navegue entre as p√°ginas do carrossel üëá", pages)

if page == "Resumo do Projeto":
    st.title("Projeto Educacional de ETL com Dados P√∫blicos do DF")
    st.markdown("""
    üö® **Voc√™ sabia?**  
    - O Instituto de Previd√™ncia dos Servidores do DF lidera a folha de pagamento do DF.
    - Cargos com maiores sal√°rios est√£o em gest√£o, fiscaliza√ß√£o e seguran√ßa p√∫blica.
    - A maior parte dos sal√°rios mais altos √© de aposentados e pensionistas.
    - Entre ativos, as maiores remunera√ß√µes s√£o da Seguran√ßa P√∫blica.

    ‚ö†Ô∏è **Este projeto √© apenas para fins educacionais.**
    """)
    st.markdown("""
    **Como funciona o pipeline ETL:**
    1Ô∏è‚É£ Extra√ß√£o dos dados do Portal da Transpar√™ncia  
    2Ô∏è‚É£ Tratamento e padroniza√ß√£o dos dados  
    3Ô∏è‚É£ An√°lise com SQL e visualiza√ß√£o  
    4Ô∏è‚É£ Storytelling  
    """)

if page == "Top 10 √ìrg√£os com Maior Soma de Sal√°rios":
    st.header("Top 10 √ìrg√£os com Maior Soma de Sal√°rios")
    df_orgaos = duckdb.query(sql1).to_df()
    df_orgaos['SOMA_SALARIO'] = df_orgaos['SOMA_SALARIO'].apply(
        lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    )
    st.dataframe(df_orgaos)
    st.code(sql1, language="sql")

if page == "Top 10 Maiores Sal√°rios L√≠quidos por Cargo":
    st.header("Top 10 Maiores Sal√°rios L√≠quidos por Cargo")
    df_cargos = duckdb.query(sql2).to_df()
    df_cargos['MAIOR_LIQUIDO'] = df_cargos['MAIOR_LIQUIDO'].apply(
        lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    )
    st.dataframe(df_cargos)
    st.code(sql2, language="sql")

if page == "Top 10 Maiores Sal√°rios L√≠quidos entre Servidores Ativos":
    st.header("Top 10 Maiores Sal√°rios L√≠quidos entre Servidores Ativos")
    df_ativos = duckdb.query(sql3).to_df()
    df_ativos['MAIOR_LIQUIDO'] = df_ativos['MAIOR_LIQUIDO'].apply(
        lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    )
    st.dataframe(df_ativos)
    st.code(sql3, language="sql")

if page == "Storytelling Final":
    st.header("Resumo e Interpreta√ß√£o dos Dados")
    st.markdown("""
    - O Instituto de Previd√™ncia dos Servidores do DF lidera a soma dos sal√°rios, evidenciando o peso dos benef√≠cios previdenci√°rios.
    - Os maiores sal√°rios l√≠quidos concentram-se em cargos de gest√£o, fiscaliza√ß√£o, educa√ß√£o e seguran√ßa p√∫blica.
    - Entre os maiores sal√°rios, predominam aposentados e pensionistas, refor√ßando a relev√¢ncia da previd√™ncia.
    - Entre servidores ativos, destacam-se os cargos das for√ßas de seguran√ßa (Pol√≠cia Militar, Pol√≠cia Civil), com altos sal√°rios decorrentes de adicionais, tempo de carreira e riscos da profiss√£o.
    - Os altos sal√°rios resultam da soma de carreira longa, benef√≠cios legais, gratifica√ß√µes, ac√∫mulo de fun√ß√µes e, por vezes, decis√µes judiciais.

    **Para exportar cada p√°gina, use Ctrl+P no navegador e salve como PDF ou PNG!**
    """)

